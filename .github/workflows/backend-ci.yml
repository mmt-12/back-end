name: backend-ci

on:
  push:
    branches: [ "develop", "main" ]

permissions:
  contents: read
  packages: write

concurrency:
  group: be-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Docker login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set tags (main->prod / develop->dev)
        id: tags
        run: |
          IMAGE=ghcr.io/mmt-12/memento-api
          CHAN=$([ "${{ github.ref_name }}" = "main" ] && echo "prod" || echo "dev")
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "chan=$CHAN"   >> $GITHUB_OUTPUT
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./memento
          file: ./memento/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.tags.outputs.image }}:${{ steps.tags.outputs.chan }}
            ${{ steps.tags.outputs.image }}:${{ steps.tags.outputs.chan }}-${{ steps.tags.outputs.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to self-hosted
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Set env/service from branch
        id: env
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
            echo "service=prod-api" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
            echo "service=dev-api" >> $GITHUB_OUTPUT
          fi

      - name: Login GHCR (for private images)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure external network and infra services are up
        run: |
          # Ensure external proxy network exists (idempotent)
          docker network inspect proxy-net >/dev/null 2>&1 || docker network create proxy-net
          # Determine infra services based on env
          if [ "${{ steps.env.outputs.env }}" = "prod" ]; then
            INFRA_SVCS="prod-mysql prod-redis prod-minio"
          else
            INFRA_SVCS="dev-mysql dev-redis dev-minio"
          fi
          # Bring up infra services without touching volumes (idempotent)
          docker compose -f /home/brokenfinger98/infra/${{ steps.env.outputs.env }}/docker-compose.yml up -d $INFRA_SVCS || true

      - name: Pull image
        run: |
          test -f /home/brokenfinger98/infra/${{ steps.env.outputs.env }}/.env || (echo "Missing .env at /home/brokenfinger98/infra/${{ steps.env.outputs.env }}/.env" && exit 1)
          docker compose -f /home/brokenfinger98/infra/${{ steps.env.outputs.env }}/docker-compose.yml config -q
          docker compose -f /home/brokenfinger98/infra/${{ steps.env.outputs.env }}/docker-compose.yml pull ${{ steps.env.outputs.service }}

      - name: Restart service (no deps)
        run: |
          docker compose -f /home/brokenfinger98/infra/${{ steps.env.outputs.env }}/docker-compose.yml up -d --no-deps ${{ steps.env.outputs.service }}
